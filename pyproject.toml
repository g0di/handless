[project]
name = "handless"
version = "0.1.0-alpha.2"
description = "A Python dependency injection container that automatically resolves and injects dependencies without polluting your code with framework-specific decorators. Inspired by Lagom, Svcs, and C# .NET DI, it keeps your code clean and flexible while offering multiple service registration options. ðŸš€"
readme = "README.md"
authors = [{ name = "g0di", email = "benoit.godard.p@gmail.com" }]
requires-python = ">=3.10"
dependencies = ["typing-extensions>=4.12.2"]
license = { file = "LICENSE" }
keywords = [
    "dependency injection",
    "DI",
    "inversion of control",
    "IoC",
    "service container",
    "dependency resolver",
]
classifiers = [
    "Development Status :: 4 - Beta",
    # "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: Implementation :: CPython",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Software Development :: Libraries",
    "Topic :: Software Development :: Object Brokering",
    "Typing :: Typed",
]

[project.urls]
Homepage = "https://github.com/g0di/handless"
Documentation = "https://github.com/g0di/handless"
Source = "https://github.com/g0di/handless"
Changelog = "https://github.com/g0di/handless/blob/main/CHANGELOG.md"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[dependency-groups]
dev = ["invoke>=2.2.0", "tox>=4.25.0", "tox-uv>=1.25.0"]
lint = ["mypy>=1.15.0", "ruff>=0.9.9"]
test = ["pytest>=8.3.4", "pytest-cov>=6.0.0", "pytest-mock>=3.14.0"]

[tool.mypy]
files = ["src", "tests"]
exclude = "src/handless/registry"
strict = true

[tool.ruff]
src = ["src", "tests"]

[tool.ruff.format]
docstring-code-format = true
skip-magic-trailing-comma = true

[tool.ruff.lint]
select = ["ALL"]
ignore = [
    # Disable rules conflicting with formatter. See: https://docs.astral.sh/ruff/formatter/#conflicting-lint-rules
    "COM812",
    "COM819",
    "D206",
    "D300",
    "E111",
    "E114",
    "E117",
    "E501",
    "ISC001",
    "ISC001",
    "Q000",
    "Q001",
    "Q002",
    "Q003",
    "W191",
    "D1",     # It's fine to not comment every single class, method and module 
    "TD",     # Let's keep TODOs simple for now
    "FIX002", # I use TODO for remembering some stuff to be done later
]

[tool.ruff.lint.extend-per-file-ignores]
"tests/**/*.py" = [
    "S101", # Let me use assert in tests please
    "FBT",  # Don't care about booleans as positional arguments in tests, e.g. via @pytest.mark.parametrize()
    "S311", # Standard pseudo-random generators are fine in tests
]

[tool.ruff.lint.isort]
split-on-trailing-comma = false

[tool.ruff.lint.pydocstyle]
convention = "pep257"

[tool.pytest.ini_options]
testpaths = ["tests"]
addopts = ["--cov", "--cov-report=term-missing"]

[tool.coverage.run]
branch = true
parallel = true
source = ["handless"]

[tool.coverage.paths]
# Map src files with ones installed in venv.
# This is for properly combining coverages report when testing against installed version of the project
source = ["src/", "*/site-packages/"]

[tool.coverage.report]
exclude_also = ["if TYPE_CHECKING:", "class .*\\bProtocol\\):", "@overload"]

[tool.tox]
requires = ["tox>=4"]
env_list = ["3.13", "3.12", "3.11", "3.10", "coverage"]
# set_env = { COVERAGE_FILE = ".coverage" }

[tool.tox.env_run_base]
description = "run unit tests"
dependency_groups = ["test"]
commands = [
    [
        "coverage",
        "run",
        "-m",
        "pytest",
        "-rN",
        { replace = "posargs", extend = true },
    ],
]

[tool.tox.env.coverage]
depends = ["3.13", "3.12", "3.11", "3.10"]
description = "compute coverage"
skip_install = true
deps = ["coverage[toml]"]
commands = [["coverage", "combine"], ["coverage", "html"]]
